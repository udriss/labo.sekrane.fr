// lib/services/notification-service.ts

/**
 * Service pour cr√©er et envoyer des notifications via l'API
 */

interface CreateNotificationParams {
  targetRoles?: string[];
  module: string;
  actionType: string;
  message: { fr: string; en: string };
  details?: string;
  severity?: 'low' | 'medium' | 'high' | 'critical';
  entityType?: string;
  entityId?: string;
  specificUsers?: string[];
}

export class NotificationService {
  /**
   * Cr√©er et envoyer une notification
   */
  static async createNotification(params: CreateNotificationParams): Promise<boolean> {
    try {
      console.log('üîî [NotificationService] Cr√©ation de notification:', params.module, params.actionType);

      // Utiliser l'endpoint /ws qui a le syst√®me de push int√©gr√©
      const response = await fetch('/api/notifications/ws', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'create-and-notify',
          ...params
        }),
      });

      if (!response.ok) {
        const errorData = await response.text();
        console.error('‚ùå [NotificationService] Erreur API:', response.status, errorData);
        return false;
      }

      const data = await response.json();
      
      if (data.success) {
        console.log('‚úÖ [NotificationService] Notification cr√©√©e et diffus√©e:', data.notificationId, `vers ${data.sentToConnections} connexions`);
        return true;
      } else {
        console.error('‚ùå [NotificationService] Cr√©ation √©chou√©e:', data.error);
        return false;
      }

    } catch (error) {
      console.error('‚ùå [NotificationService] Erreur lors de la cr√©ation:', error);
      return false;
    }
  }

  /**
   * Cr√©er une notification de test
   */
  static async createTestNotification(userId?: string): Promise<boolean> {
    return this.createNotification({
      module: 'system',
      actionType: 'test',
      message: {
        fr: 'Notification de test - syst√®me de notifications temps r√©el actif',
        en: 'Test notification - real-time notification system active'
      },
      details: 'Ceci est une notification de test pour v√©rifier le bon fonctionnement du syst√®me SSE.',
      severity: 'medium',
      specificUsers: userId ? [userId] : undefined,
      targetRoles: userId ? undefined : ['ADMIN', 'USER']
    });
  }

  /**
   * Notifications pour les √©quipements
   */
  static async notifyEquipmentAction(
    action: 'created' | 'updated' | 'deleted' | 'borrowed' | 'returned',
    equipmentName: string,
    userId?: string
  ): Promise<boolean> {
    const messages = {
      created: {
        fr: `Nouvel √©quipement ajout√©: ${equipmentName}`,
        en: `New equipment added: ${equipmentName}`
      },
      updated: {
        fr: `√âquipement modifi√©: ${equipmentName}`,
        en: `Equipment updated: ${equipmentName}`
      },
      deleted: {
        fr: `√âquipement supprim√©: ${equipmentName}`,
        en: `Equipment deleted: ${equipmentName}`
      },
      borrowed: {
        fr: `√âquipement emprunt√©: ${equipmentName}`,
        en: `Equipment borrowed: ${equipmentName}`
      },
      returned: {
        fr: `√âquipement retourn√©: ${equipmentName}`,
        en: `Equipment returned: ${equipmentName}`
      }
    };

    return this.createNotification({
      module: 'equipment',
      actionType: action,
      message: messages[action],
      details: `Action effectu√©e sur l'√©quipement: ${equipmentName}`,
      severity: action === 'deleted' ? 'high' : 'medium',
      specificUsers: userId ? [userId] : undefined,
      targetRoles: userId ? undefined : ['ADMIN', 'USER']
    });
  }

  /**
   * Notifications pour les r√©servations
   */
  static async notifyCalendarAction(
    action: 'created' | 'updated' | 'deleted',
    eventTitle: string,
    userId?: string
  ): Promise<boolean> {
    const messages = {
      created: {
        fr: `Nouvelle r√©servation: ${eventTitle}`,
        en: `New reservation: ${eventTitle}`
      },
      updated: {
        fr: `R√©servation modifi√©e: ${eventTitle}`,
        en: `Reservation updated: ${eventTitle}`
      },
      deleted: {
        fr: `R√©servation annul√©e: ${eventTitle}`,
        en: `Reservation cancelled: ${eventTitle}`
      }
    };

    return this.createNotification({
      module: 'calendar',
      actionType: action,
      message: messages[action],
      details: `Action effectu√©e sur la r√©servation: ${eventTitle}`,
      severity: action === 'deleted' ? 'high' : 'medium',
      specificUsers: userId ? [userId] : undefined,
      targetRoles: userId ? undefined : ['ADMIN', 'USER']
    });
  }

  /**
   * Notifications pour les produits chimiques
   */
  static async notifyChemicalAction(
    action: 'low_stock' | 'expired' | 'added' | 'used',
    chemicalName: string,
    userId?: string
  ): Promise<boolean> {
    const messages = {
      low_stock: {
        fr: `Stock faible: ${chemicalName}`,
        en: `Low stock: ${chemicalName}`
      },
      expired: {
        fr: `Produit expir√©: ${chemicalName}`,
        en: `Expired product: ${chemicalName}`
      },
      added: {
        fr: `Nouveau produit chimique: ${chemicalName}`,
        en: `New chemical product: ${chemicalName}`
      },
      used: {
        fr: `Produit utilis√©: ${chemicalName}`,
        en: `Product used: ${chemicalName}`
      }
    };

    const severities = {
      low_stock: 'high' as const,
      expired: 'critical' as const,
      added: 'medium' as const,
      used: 'low' as const
    };

    return this.createNotification({
      module: 'chemicals',
      actionType: action,
      message: messages[action],
      details: `Action effectu√©e sur le produit chimique: ${chemicalName}`,
      severity: severities[action],
      specificUsers: userId ? [userId] : undefined,
      targetRoles: userId ? undefined : ['ADMIN', 'USER']
    });
  }
}
