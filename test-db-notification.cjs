#!/usr/bin/env node

// Test d'insertion d'une notification am√©lior√©e dans la base de donn√©es
const mysql = require('mysql2/promise');

async function testEnhancedNotification() {
  let connection;
  
  try {
    // Configuration de la base de donn√©es (√† adapter selon votre configuration)
    connection = await mysql.createConnection({
      host: 'localhost',
      user: 'int', // Ajustez selon votre configuration
      password: '4Na9Gm8mdTVgnUp', // Ajustez selon votre configuration  
      database: 'labo'
    });

    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie');

    // Cr√©er une notification test avec la nouvelle structure
    const enhancedMessage = {
      messageToDisplay: "Test Syst√®me a modifi√© la quantit√© de Acide chlorhydrique : 1L ‚Üí 500ml",
      log_message: "Action UPDATE effectu√©e sur chemical dans le module CHEMICALS - TEST",
      change_details: {
        field: "quantity",
        old_value: "1L",
        new_value: "500ml", 
        chemical_name: "Acide chlorhydrique",
        test_notification: true
      }
    };

    const notification = {
      message: JSON.stringify(enhancedMessage),
      module: 'CHEMICALS',
      severity: 'medium',
      actionType: 'UPDATE',
      triggeredBy: 'test@example.com',
      timestamp: new Date(),
      isRead: false
    };

    // Ins√©rer la notification
    const [result] = await connection.execute(
      `INSERT INTO notifications (message, module, severity, action_type, triggered_by, updated_at, is_read) 
       VALUES (?, ?, ?, ?, ?, ?, ?)`,
      [
        notification.message,
        notification.module, 
        notification.severity,
        notification.actionType,
        notification.triggeredBy,
        notification.timestamp,
        notification.isRead
      ]
    );

    console.log('‚úÖ Notification test ins√©r√©e avec l\'ID:', result.insertId);

    // R√©cup√©rer et afficher la notification
    const [rows] = await connection.execute(
      'SELECT * FROM notifications WHERE id = ?',
      [result.insertId]
    );

    if (rows.length > 0) {
      const retrievedNotification = rows[0];
      console.log('\nüìã Notification r√©cup√©r√©e:');
      console.log('ID:', retrievedNotification.id);
      console.log('Module:', retrievedNotification.module);
      console.log('S√©v√©rit√©:', retrievedNotification.severity);
      console.log('Action:', retrievedNotification.actionType);
      console.log('D√©clench√©e par:', retrievedNotification.triggeredBy);
      
      // Parser le message JSON
      const parsedMessage = JSON.parse(retrievedNotification.message);
      console.log('\nüí¨ Messages:');
      console.log('Message utilisateur:', parsedMessage.messageToDisplay);
      console.log('Log technique:', parsedMessage.log_message);
      console.log('D√©tails:', JSON.stringify(parsedMessage.change_details, null, 2));
    }

    // Nettoyer - supprimer la notification test
    await connection.execute('DELETE FROM notifications WHERE id = ?', [result.insertId]);
    console.log('\nüßπ Notification test supprim√©e');

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° La base de donn√©es MySQL n\'est pas accessible.');
      console.log('   V√©rifiez que MySQL est d√©marr√© et que les param√®tres de connexion sont corrects.');
    } else if (error.code === 'ER_NO_SUCH_TABLE') {
      console.log('\nüí° La table notifications n\'existe pas.');
      console.log('   V√©rifiez que les migrations Prisma ont √©t√© ex√©cut√©es.');
    }
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

// Ex√©cuter le test
testEnhancedNotification();
