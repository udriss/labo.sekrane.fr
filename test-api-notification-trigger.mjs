#!/usr/bin/env node

// Test de vraie notification via l'API 
import mysql from 'mysql2/promise';
import dotenv from 'dotenv';

// Charger les variables d'environnement
dotenv.config();

async function testAPINotificationTrigger() {
  console.log('üß™ Test de d√©clenchement de notification via modification directe DB\n');

  const connection = await mysql.createConnection({
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
    charset: 'utf8mb4'
  });

  try {
    // 1. R√©cup√©rer un chemical existant
    console.log('1. üìã R√©cup√©ration d\'un chemical existant...');
    const [chemicals] = await connection.execute(`
      SELECT id, name, quantity, unit 
      FROM chemicals 
      LIMIT 1
    `);

    if (chemicals.length === 0) {
      console.log('‚ùå Aucun chemical trouv√©');
      return;
    }

    const chemical = chemicals[0];
    console.log(`‚úÖ Chemical: ${chemical.name} (${chemical.quantity}${chemical.unit})`);

    // 2. Simuler notre fonction createEnhancedNotificationMessage
    console.log('\n2. üé® Test de la fonction createEnhancedNotificationMessage...');
    
    const triggeredBy = {
      id: '1',
      name: 'Administrateur',
      email: 'admin@labo.fr',
      role: 'ADMIN'
    };

    const oldQuantity = parseFloat(chemical.quantity);
    const newQuantity = oldQuantity + 25.5;
    
    const details = {
      chemicalName: chemical.name,
      quantityUpdate: true,
      before: { quantity: oldQuantity, unit: chemical.unit },
      after: { quantity: newQuantity, unit: chemical.unit },
      fields: ['quantity'],
      quantity: newQuantity,
      unit: chemical.unit
    };

    // Reproduire la logique de createChemicalNotificationMessage
    const createChemicalMessage = (triggeredBy, actionType, details) => {
      const userName = triggeredBy.name;
      
      if (actionType === 'UPDATE' && details.quantityUpdate && 
          details.before?.quantity !== undefined && 
          details.after?.quantity !== undefined) {
        const oldQuantity = details.before.quantity;
        const newQuantity = details.after.quantity;
        const unit = details.after.unit || details.before.unit || '';
        return `${userName} a modifi√© la quantit√© de ${details.chemicalName} : ${oldQuantity}${unit} ‚Üí ${newQuantity}${unit}`;
      }
      
      return `${userName} a effectu√© une action sur un r√©actif chimique`;
    };

    const messageToDisplay = createChemicalMessage(triggeredBy, 'UPDATE', details);
    const logMessage = 'Action UPDATE effectu√©e sur chemical dans le module CHEMICALS';

    console.log(`üí¨ Message utilisateur: "${messageToDisplay}"`);
    console.log(`üìù Message log: "${logMessage}"`);

    // 3. Cr√©er la notification avec le nouveau format
    console.log('\n3. üì§ Cr√©ation de la notification test...');
    
    const notificationId = 'api_test_' + Date.now();
    const messageObject = {
      messageToDisplay: messageToDisplay,
      log_message: logMessage
    };

    await connection.execute(`
      INSERT INTO notifications (
        id, user_role, target_roles, module, action_type, message,
        severity, entity_type, entity_id, triggered_by, created_at
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW())
    `, [
      notificationId,
      'ADMIN',
      JSON.stringify(['ADMIN', 'LABORANTIN']),
      'CHEMICALS',
      'UPDATE',
      JSON.stringify(messageObject),
      'low',
      'chemical',
      chemical.id,
      triggeredBy.id
    ]);

    console.log(`‚úÖ Notification cr√©√©e: ${notificationId}`);

    // 4. V√©rifier la notification cr√©√©e
    console.log('\n4. üîç V√©rification de la notification...');
    
    const [notifications] = await connection.execute(`
      SELECT id, message, created_at
      FROM notifications 
      WHERE id = ?
    `, [notificationId]);

    if (notifications.length > 0) {
      const notif = notifications[0];
      console.log(`üì¨ Notification r√©cup√©r√©e:`);
      
      try {
        const messageObj = JSON.parse(notif.message);
        console.log(`   üí¨ Message utilisateur: "${messageObj.messageToDisplay}"`);
        console.log(`   üìù Message log: "${messageObj.log_message}"`);
        console.log(`   üïí Cr√©√©e: ${notif.created_at}`);
      } catch (e) {
        console.log(`   ‚ùå Erreur parsing: ${e.message}`);
        console.log(`   üìÑ Message brut: ${notif.message}`);
      }
    }

    // 5. Test de compatibilit√© avec l'affichage frontend
    console.log('\n5. üñ•Ô∏è Test de compatibilit√© frontend...');
    
    const frontendDisplayLogic = (message) => {
      try {
        const messageObj = JSON.parse(message);
        
        // Nouveau format prioritaire
        if (typeof messageObj === 'object' && messageObj.messageToDisplay) {
          return {
            text: messageObj.messageToDisplay,
            type: 'enhanced'
          };
        }
        // Ancien format
        else if (typeof messageObj === 'string') {
          return {
            text: messageObj,
            type: 'legacy'
          };
        }
        // Autres formats (multi-langue, etc.)
        else if (typeof messageObj === 'object' && messageObj.fr) {
          return {
            text: messageObj.fr,
            type: 'i18n'
          };
        }
        
        return {
          text: JSON.stringify(messageObj),
          type: 'unknown'
        };
      } catch (e) {
        return {
          text: 'Message indisponible',
          type: 'error'
        };
      }
    };

    const display = frontendDisplayLogic(notifications[0].message);
    console.log(`üì± Affichage frontend: "${display.text}" (Type: ${display.type})`);

    // 6. Nettoyage
    await connection.execute(`DELETE FROM notifications WHERE id = ?`, [notificationId]);
    console.log('\nüßπ Notification de test supprim√©e');

    console.log('\n‚úÖ Test termin√© avec succ√®s!');
    console.log('\nüéØ R√©sultats:');
    console.log('   ‚Ä¢ La fonction de cr√©ation de message fonctionne correctement');
    console.log('   ‚Ä¢ Le format JSON est bien s√©rialis√© en base');
    console.log('   ‚Ä¢ L\'affichage frontend peut g√©rer le nouveau format');
    console.log('   ‚Ä¢ La r√©trocompatibilit√© est assur√©e');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  } finally {
    await connection.end();
  }
}

// Ex√©cuter le test
testAPINotificationTrigger().catch(console.error);
