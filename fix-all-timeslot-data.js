// Script pour corriger toutes les donn√©es des cr√©neaux avec user_id et event_owner 'system'
import mysql from 'mysql2/promise'

async function fixAllTimeslotData() {
  let connection
  
  try {
    connection = await mysql.createConnection({
      host: 'localhost',
      user: 'int',
      password: '4Na9Gm8mdTVgnUp',
      database: 'labo'
    })
    
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie')
    
    // 1. V√©rifier l'utilisateur connect√© (ID 1)
    console.log('\nüìã 1. Informations sur l\'utilisateur ID 1:')
    const [userData] = await connection.execute(
      'SELECT id, email, name, role FROM users WHERE id = ?',
      [1]
    )
    
    if (userData.length === 0) {
      console.log('  ‚ùå Utilisateur ID 1 non trouv√©')
      return
    }

    const user = userData[0]
    console.log(`  ID: ${user.id}, Email: ${user.email}, Name: ${user.name}, Role: ${user.role}`)
    
    // 2. Corriger tous les √©v√©nements avec created_by = 'system'
    console.log('\nüìã 2. Correction des √©v√©nements avec created_by = "system":')
    const [eventsToFix] = await connection.execute(
      'SELECT id, title, created_by FROM calendar_chimie WHERE created_by = "system"'
    )
    
    if (eventsToFix.length > 0) {
      console.log(`  ‚ÑπÔ∏è  ${eventsToFix.length} √©v√©nement(s) √† corriger:`)
      eventsToFix.forEach(event => {
        console.log(`    - ${event.id}: "${event.title}"`)
      })
      
      await connection.execute(
        'UPDATE calendar_chimie SET created_by = ? WHERE created_by = "system"',
        [user.id.toString()]
      )
      console.log(`  ‚úÖ ${eventsToFix.length} √©v√©nement(s) corrig√©(s)`)
    } else {
      console.log(`  ‚ÑπÔ∏è  Aucun √©v√©nement √† corriger`)
    }
    
    // 3. Corriger tous les cr√©neaux avec user_id ou event_owner = 'system'
    console.log('\nüìã 3. Correction des cr√©neaux avec user_id ou event_owner = "system":')
    const [timeslotsToFix] = await connection.execute(
      'SELECT id, event_id, user_id, event_owner FROM timeslots_data WHERE user_id = "system" OR event_owner = "system"'
    )
    
    if (timeslotsToFix.length > 0) {
      console.log(`  ‚ÑπÔ∏è  ${timeslotsToFix.length} cr√©neau(x) √† corriger:`)
      timeslotsToFix.forEach(slot => {
        console.log(`    - ${slot.id}: event_id=${slot.event_id}, user_id=${slot.user_id}, event_owner=${slot.event_owner}`)
      })
      
      await connection.execute(
        'UPDATE timeslots_data SET user_id = ?, event_owner = ? WHERE user_id = "system" OR event_owner = "system"',
        [user.id.toString(), user.id.toString()]
      )
      console.log(`  ‚úÖ ${timeslotsToFix.length} cr√©neau(x) corrig√©(s)`)
    } else {
      console.log(`  ‚ÑπÔ∏è  Aucun cr√©neau √† corriger`)
    }
    
    // 4. V√©rifier les changements
    console.log('\nüìã 4. V√©rification finale:')
    
    const [remainingEvents] = await connection.execute(
      'SELECT COUNT(*) as count FROM calendar_chimie WHERE created_by = "system"'
    )
    console.log(`  √âv√©nements restants avec created_by="system": ${remainingEvents[0].count}`)
    
    const [remainingTimeslots] = await connection.execute(
      'SELECT COUNT(*) as count FROM timeslots_data WHERE user_id = "system" OR event_owner = "system"'
    )
    console.log(`  Cr√©neaux restants avec user_id/event_owner="system": ${remainingTimeslots[0].count}`)
    
    console.log('\nüéâ Correction termin√©e avec succ√®s!')
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message)
  } finally {
    if (connection) {
      await connection.end()
      console.log('\nüîê Connexion ferm√©e')
    }
  }
}

fixAllTimeslotData()
