import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import { notificationConfigService } from '@/lib/services/NotificationConfigService';

// GET - R√©cup√©rer toutes les pr√©f√©rences de notifications
export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session?.user) {
      return NextResponse.json(
        { error: 'Non autoris√©' },
        { status: 401 }
      );
    }

    const user = session.user as any;
    if (!user.role || !['ADMIN', 'ADMINLABO'].includes(user.role)) {
      return NextResponse.json(
        { error: 'Permissions insuffisantes' },
        { status: 403 }
      );
    }

    const { searchParams } = new URL(request.url);
    const userId = searchParams.get('userId');
    const role = searchParams.get('role');

    console.log('[API] üìã R√©cup√©ration des pr√©f√©rences de notifications...');

    let preferences;
    if (userId) {
      preferences = await notificationConfigService.getPreferencesByUserId(userId);
    } else if (role) {
      preferences = await notificationConfigService.getPreferencesByRole(role);
    } else {
      preferences = await notificationConfigService.getAllPreferences();
    }

    console.log(`[API] ‚úÖ ${preferences.length} pr√©f√©rences r√©cup√©r√©es`);

    return NextResponse.json({
      success: true,
      preferences
    });

  } catch (error) {
    console.error('[API] ‚ùå Erreur lors de la r√©cup√©ration des pr√©f√©rences:', error);
    return NextResponse.json(
      { 
        error: 'Erreur interne du serveur',
        details: error instanceof Error ? error.message : 'Erreur inconnue'
      },
      { status: 500 }
    );
  }
}

// POST - Initialiser les pr√©f√©rences par d√©faut ou r√©initialiser
export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session?.user) {
      return NextResponse.json(
        { error: 'Non autoris√©' },
        { status: 401 }
      );
    }

    const user = session.user as any;
    if (!user.role || user.role !== 'ADMIN') {
      return NextResponse.json(
        { error: 'Seuls les administrateurs peuvent initialiser les pr√©f√©rences' },
        { status: 403 }
      );
    }

    const body = await request.json();

    // Action de r√©initialisation aux valeurs par d√©faut
    if (body.action === 'reset-defaults') {
      console.log('[API] üîÑ R√©initialisation des pr√©f√©rences aux valeurs par d√©faut...');
      
      // R√©initialiser d'abord les configurations
      await notificationConfigService.resetToDefaults();
      
      // Supprimer toutes les pr√©f√©rences personnalis√©es pour forcer l'utilisation des valeurs par d√©faut
      // TODO: Impl√©menter la suppression des pr√©f√©rences personnalis√©es si n√©cessaire
      
      const preferences = await notificationConfigService.getAllPreferences();

      console.log('[API] ‚úÖ R√©initialisation termin√©e');

      return NextResponse.json({
        success: true,
        message: 'Pr√©f√©rences r√©initialis√©es aux valeurs par d√©faut',
        preferences
      });
    }

    // Action d'initialisation des pr√©f√©rences pour un utilisateur
    if (body.action === 'initialize-user') {
      const { userId, userRole } = body;
      
      if (!userId || !userRole) {
        return NextResponse.json(
          { error: 'userId et userRole requis pour l\'initialisation' },
          { status: 400 }
        );
      }

      console.log(`[API] üöÄ Initialisation des pr√©f√©rences pour l'utilisateur: ${userId} (${userRole})`);
      
      // R√©cup√©rer toutes les configurations disponibles
      const configs = await notificationConfigService.getAllConfigs();
      
      // Cr√©er les pr√©f√©rences bas√©es sur les valeurs par d√©faut du r√¥le
      for (const config of configs) {
        const enabled = config.defaultRoles.includes(userRole);
        await notificationConfigService.createOrUpdatePreference(
          userId,
          userRole,
          config.module,
          config.actionType,
          enabled
        );
      }

      console.log(`[API] ‚úÖ Pr√©f√©rences initialis√©es pour ${userId}`);

      return NextResponse.json({
        success: true,
        message: `Pr√©f√©rences initialis√©es pour l'utilisateur ${userId}`,
      });
    }

    return NextResponse.json(
      { error: 'Action non reconnue' },
      { status: 400 }
    );

  } catch (error) {
    console.error('[API] ‚ùå Erreur lors de l\'initialisation:', error);
    return NextResponse.json(
      { 
        error: 'Erreur interne du serveur',
        details: error instanceof Error ? error.message : 'Erreur inconnue'
      },
      { status: 500 }
    );
  }
}

// PUT - Mettre √† jour les pr√©f√©rences par r√¥le
export async function PUT(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session?.user) {
      return NextResponse.json(
        { error: 'Non autoris√©' },
        { status: 401 }
      );
    }

    const user = session.user as any;
    if (!user.role || !['ADMIN', 'ADMINLABO'].includes(user.role)) {
      return NextResponse.json(
        { error: 'Permissions insuffisantes' },
        { status: 403 }
      );
    }

    const body = await request.json();

    // Mise √† jour par utilisateur sp√©cifique
    if (body.userId) {
      const { userId, userRole, updates } = body;

      if (!userId || !userRole || !Array.isArray(updates)) {
        return NextResponse.json(
          { error: 'userId, userRole et updates (array) sont requis' },
          { status: 400 }
        );
      }

      console.log(`[API] ‚úèÔ∏è Mise √† jour des pr√©f√©rences pour l'utilisateur: ${userId}`);

      for (const update of updates) {
        const { module, actionType, enabled, customSettings } = update;
        
        if (!module || !actionType) {
          console.warn(`[API] ‚ö†Ô∏è Module ou actionType manquant dans les updates`);
          continue;
        }

        await notificationConfigService.createOrUpdatePreference(
          userId,
          userRole,
          module,
          actionType,
          enabled !== undefined ? enabled : true,
          customSettings
        );
      }

      console.log(`[API] ‚úÖ ${updates.length} pr√©f√©rences mises √† jour pour ${userId}`);

      return NextResponse.json({
        success: true,
        message: `Pr√©f√©rences mises √† jour pour l'utilisateur ${userId}`,
        updatedCount: updates.length
      });
    }

    // Mise √† jour par r√¥le (pour la compatibilit√© avec l'interface existante)
    if (body.role) {
      const { role, updates } = body;

      if (!role || !Array.isArray(updates)) {
        return NextResponse.json(
          { error: 'role et updates (array) sont requis' },
          { status: 400 }
        );
      }

      console.log(`[API] ‚úèÔ∏è Mise √† jour des pr√©f√©rences par r√¥le: ${role}`);

      // Pour la mise √† jour par r√¥le, nous devons mettre √† jour toutes les pr√©f√©rences existantes
      // ou cr√©er un syst√®me de pr√©f√©rences par d√©faut de r√¥le
      let updatedCount = 0;

      // R√©cup√©rer tous les utilisateurs avec ce r√¥le (√† impl√©menter selon votre syst√®me d'utilisateurs)
      // Pour l'instant, nous allons cr√©er/mettre √† jour des pr√©f√©rences "templates" pour le r√¥le
      
      for (const update of updates) {
        const { module, actionType, enabled } = update;
        
        if (!module || !actionType) {
          console.warn(`[API] ‚ö†Ô∏è Module ou actionType manquant dans les updates`);
          continue;
        }

        // Ici, vous pourriez impl√©menter une logique pour mettre √† jour
        // toutes les pr√©f√©rences existantes pour ce r√¥le, ou maintenir
        // une table de pr√©f√©rences par d√©faut par r√¥le
        
        // Pour l'instant, nous utilisons un ID sp√©cial pour les pr√©f√©rences de r√¥le
        const roleUserId = `ROLE_${role}`;
        
        await notificationConfigService.createOrUpdatePreference(
          roleUserId,
          role,
          module,
          actionType,
          enabled !== undefined ? enabled : true
        );
        
        updatedCount++;
      }

      console.log(`[API] ‚úÖ ${updatedCount} pr√©f√©rences mises √† jour pour le r√¥le ${role}`);

      return NextResponse.json({
        success: true,
        message: `Pr√©f√©rences mises √† jour pour le r√¥le ${role}`,
        updatedCount
      });
    }

    return NextResponse.json(
      { error: 'userId ou role requis' },
      { status: 400 }
    );

  } catch (error) {
    console.error('[API] ‚ùå Erreur lors de la mise √† jour:', error);
    return NextResponse.json(
      { 
        error: 'Erreur interne du serveur',
        details: error instanceof Error ? error.message : 'Erreur inconnue'
      },
      { status: 500 }
    );
  }
}

// DELETE - Supprimer les pr√©f√©rences d'un utilisateur
export async function DELETE(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session?.user) {
      return NextResponse.json(
        { error: 'Non autoris√©' },
        { status: 401 }
      );
    }

    const user = session.user as any;
    if (!user.role || user.role !== 'ADMIN') {
      return NextResponse.json(
        { error: 'Seuls les administrateurs peuvent supprimer les pr√©f√©rences' },
        { status: 403 }
      );
    }

    const { searchParams } = new URL(request.url);
    const userId = searchParams.get('userId');

    if (!userId) {
      return NextResponse.json(
        { error: 'userId requis' },
        { status: 400 }
      );
    }

    console.log(`[API] üóëÔ∏è Suppression des pr√©f√©rences pour l'utilisateur: ${userId}`);

    // TODO: Impl√©menter la suppression dans NotificationConfigService
    // const deleted = await notificationConfigService.deleteUserPreferences(userId);

    console.log(`[API] ‚úÖ Pr√©f√©rences supprim√©es pour ${userId}`);

    return NextResponse.json({
      success: true,
      message: `Pr√©f√©rences supprim√©es pour l'utilisateur ${userId}`
    });

  } catch (error) {
    console.error('[API] ‚ùå Erreur lors de la suppression:', error);
    return NextResponse.json(
      { 
        error: 'Erreur interne du serveur',
        details: error instanceof Error ? error.message : 'Erreur inconnue'
      },
      { status: 500 }
    );
  }
}
