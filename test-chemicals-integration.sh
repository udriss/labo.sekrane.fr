#!/bin/bash

# test-chemicals-integration.sh
# Script pour tester l'int√©gration compl√®te des chemicals avec MySQL

echo "üß™ Test d'int√©gration des chemicals avec MySQL"
echo "=============================================="

# Fonction pour afficher les erreurs en rouge
print_error() {
    echo -e "\033[31m‚ùå $1\033[0m"
}

# Fonction pour afficher les succ√®s en vert
print_success() {
    echo -e "\033[32m‚úÖ $1\033[0m"
}

# Fonction pour afficher les infos en bleu
print_info() {
    echo -e "\033[34m‚ÑπÔ∏è  $1\033[0m"
}

# Test 1: V√©rifier que la base de donn√©es est accessible
echo ""
print_info "Test 1: V√©rification de la connexion √† la base de donn√©es"
if npx tsx -e "
import { query, closePool } from './lib/db.ts';
(async () => {
  try {
    await query('SELECT 1');
    console.log('‚úÖ Connexion r√©ussie');
    process.exit(0);
  } catch (e) {
    console.error('‚ùå Erreur de connexion:', e.message);
    process.exit(1);
  } finally {
    await closePool();
  }
})();
"; then
    print_success "Connexion √† la base de donn√©es OK"
else
    print_error "Impossible de se connecter √† la base de donn√©es"
    exit 1
fi

# Test 2: V√©rifier que les tables existent
echo ""
print_info "Test 2: V√©rification de l'existence des tables"
if npx tsx -e "
import { query, closePool } from './lib/db.ts';
(async () => {
  try {
    const tables = await query('SHOW TABLES LIKE \"chemicals\"');
    if (tables.length > 0) {
      console.log('‚úÖ Table chemicals existe');
    } else {
      console.log('‚ùå Table chemicals n\'existe pas');
      process.exit(1);
    }
    
    const suppliers = await query('SHOW TABLES LIKE \"suppliers\"');
    if (suppliers.length > 0) {
      console.log('‚úÖ Table suppliers existe');
    } else {
      console.log('‚ùå Table suppliers n\'existe pas');
      process.exit(1);
    }
    process.exit(0);
  } catch (e) {
    console.error('‚ùå Erreur:', e.message);
    process.exit(1);
  } finally {
    await closePool();
  }
})();
"; then
    print_success "Tables chemicals et suppliers existent"
else
    print_error "Probl√®me avec les tables"
    exit 1
fi

# Test 3: Test d'insertion et de r√©cup√©ration
echo ""
print_info "Test 3: Test CRUD sur les chemicals"
if npx tsx test-chemicals-db.mjs; then
    print_success "Tests CRUD r√©ussis"
else
    print_error "√âchec des tests CRUD"
    exit 1
fi

# Test 4: V√©rifier que les routes API fonctionnent
echo ""
print_info "Test 4: D√©marrage du serveur de test"
# V√©rifier si Next.js peut d√©marrer (compilation TypeScript)
if npm run build > /dev/null 2>&1; then
    print_success "Compilation TypeScript r√©ussie"
else
    print_error "Erreurs de compilation TypeScript"
    echo "D√©tails des erreurs:"
    npm run build
    exit 1
fi

echo ""
print_success "üéâ Tous les tests d'int√©gration ont r√©ussi !"
echo ""
print_info "Prochaines √©tapes recommand√©es:"
echo "1. Lancer le script de migration: npx tsx scripts/migrate-chemicals-to-mysql.mjs"
echo "2. D√©marrer le serveur: npm run dev"
echo "3. Tester les routes /api/chemicals dans l'interface"
echo ""
print_info "Routes API disponibles:"
echo "   GET    /api/chemicals           - Liste tous les chemicals"
echo "   POST   /api/chemicals           - Cr√©e un nouveau chemical"
echo "   GET    /api/chemicals/[id]      - R√©cup√®re un chemical sp√©cifique"
echo "   PUT    /api/chemicals/[id]      - Met √† jour un chemical"
echo "   DELETE /api/chemicals/[id]      - Supprime un chemical"
echo "   POST   /api/chemicals/update-forecast - Met √† jour les pr√©visions"
