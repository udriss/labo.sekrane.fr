generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Utilisateur {
  id                    Int                    @id @default(autoincrement())
  email                 String                 @unique
  name                  String?
  password              String?
  role                  Role                   @default(ELEVE)
  lockedUntil           DateTime?
  isActive              Boolean                @default(true)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  classes               ClasseUtilisateur[]
  events                Evenement[]            @relation("EvenementsDuProprietaire")
  eventPresets          EvenementPreset[]      @relation("EvenementPresetsDuProprietaire")
  notifications         NotificationTarget[]
  salles                Salle[]                @relation("SalleProprietaire")
  materielEventRequests MaterielEventRequest[]
  reactifEventRequests  ReactifEventRequest[]
  emailChangeRequests   EmailChangeRequest[]
}

model Classe {
  id        Int                 @id @default(autoincrement())
  name      String
  system    Boolean             @default(false)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  users     ClasseUtilisateur[]
}

model ClasseUtilisateur {
  userId  Int
  classId Int
  class   Classe      @relation(fields: [classId], references: [id])
  user    Utilisateur @relation(fields: [userId], references: [id])

  @@id([userId, classId])
  @@index([classId], map: "ClasseUtilisateur_classId_fkey")
}

model Evenement {
  id                     Int                    @id @default(autoincrement())
  title                  String
  discipline             String
  ownerId                Int
  notes                  String?
  type                   String?                @db.VarChar(32)
  // Stored as JSON arrays of Int IDs (MySQL doesn't support native int[])
  classIds               Json? // Int[]
  salleIds               Json? // Int[]
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  timeslots              Creneau[]
  owner                  Utilisateur            @relation("EvenementsDuProprietaire", fields: [ownerId], references: [id])
  materiels              EvenementMateriel[]
  reactifs               EvenementReactif[]
  documents              EvenementDocument[]
  customMaterielRequests MaterielEventRequest[] @relation("EvenementCustomMaterielRequests")
  customReactifRequests  ReactifEventRequest[]  @relation("EvenementCustomReactifRequests")

  @@index([ownerId], map: "Evenement_ownerId_fkey")
}

model Creneau {
  id                   Int       @id @default(autoincrement())
  eventId              Int
  discipline           String
  userId               Int?
  eventOwner           Int?
  timeslotParent       Int?
  state                String    @default("created")
  startDate            DateTime
  endDate              DateTime
  timeslotDate         DateTime?
  // Proposed alternative schedule (when state = counter_proposed)
  proposedStartDate    DateTime?
  proposedEndDate      DateTime?
  proposedTimeslotDate DateTime?
  proposedNotes        String?
  proposedUserId       Int?
  // Multi-association arrays (IDs) – nouvelle fonctionnalité
  salleIds             Json? // tableau d'IDs de salles (Int[] sérialisé)
  classIds             Json? // tableau d'IDs de classes (Int[] sérialisé)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  event                Evenement @relation(fields: [eventId], references: [id])
  // Removed per-timeslot custom requests (moved to event-level)

  @@index([eventId], map: "Creneau_eventId_fkey")
}

model Salle {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  description        String?
  batiment           String?
  placesDisponibles  Int?
  userOwnerId        Int?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  consommables       Consommable[]
  localisations      Localisation[]
  materiels          MaterielInventaire[]
  reactifInventaires ReactifInventaire[]
  userOwner          Utilisateur?         @relation("SalleProprietaire", fields: [userOwnerId], references: [id])

  @@index([userOwnerId], map: "Salle_userOwnerId_fkey")
}

model Localisation {
  id                 Int                  @id @default(autoincrement())
  name               String
  description        String?
  salleId            Int
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  consommables       Consommable[]
  salle              Salle                @relation(fields: [salleId], references: [id], onDelete: Cascade)
  materiels          MaterielInventaire[]
  reactifInventaires ReactifInventaire[]

  @@unique([salleId, name])
}

model MaterielInventaire {
  id               Int       @id @default(autoincrement())
  name             String
  categoryId       Int?
  quantity         Int       @default(0)
  minStock         Int?
  model            String?
  serialNumber     String?
  supplier         String?
  purchaseDate     DateTime?
  notes            String?
  discipline       String    @default("Aucune")
  salleId          Int?
  localisationId   Int?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  materielPersoId  Int?
  materielPresetId Int?

  salle           Salle?                    @relation(fields: [salleId], references: [id])
  localisation    Localisation?             @relation(fields: [localisationId], references: [id])
  materielPerso   MaterielPerso?            @relation(fields: [materielPersoId], references: [id])
  materielPreset  MaterielPreset?           @relation(fields: [materielPresetId], references: [id])
  category        MaterielCategorie?        @relation(fields: [categoryId], references: [id])
  eventMateriels  EvenementMateriel[]
  presetMateriels EvenementPresetMateriel[]

  @@map("MaterielInventaire")
}

model ReactifInventaire {
  id              Int                      @id @default(autoincrement())
  reactifPresetId Int
  stock           Float                    @default(0)
  salleId         Int?
  localisationId  Int?
  unit            String?                  @db.VarChar(32)
  minStock        Float?
  purchaseDate    DateTime?
  expirationDate  DateTime?
  notes           String?
  supplierId      Int?
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  localisation    Localisation?            @relation(fields: [localisationId], references: [id])
  reactifPreset   ReactifPreset            @relation(fields: [reactifPresetId], references: [id])
  salle           Salle?                   @relation(fields: [salleId], references: [id])
  supplier        Supplier?                @relation(fields: [supplierId], references: [id])
  eventReactifs   EvenementReactif[]
  presetReactifs  EvenementPresetReactif[]

  @@index([reactifPresetId])
  @@index([salleId])
  @@index([localisationId])
  @@index([supplierId])
}

model Consommable {
  id             Int           @id @default(autoincrement())
  name           String
  stock          Int           @default(0)
  unit           String?
  salleId        Int?
  localisationId Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  localisation   Localisation? @relation(fields: [localisationId], references: [id])
  salle          Salle?        @relation(fields: [salleId], references: [id])

  @@index([localisationId], map: "Consommable_localisationId_fkey")
  @@index([salleId], map: "Consommable_salleId_fkey")
}

model Notification {
  id         Int                  @id @default(autoincrement())
  uuid       String               @unique
  module     String               @db.VarChar(64)
  actionType String               @db.VarChar(64)
  type       String               @db.VarChar(64)
  severity   String               @default("low")
  title      String?
  message    String
  data       Json?
  createdAt  DateTime             @default(now())
  targets    NotificationTarget[]
}

model NotificationTarget {
  id             Int          @id @default(autoincrement())
  notificationId Int
  userId         Int
  readAt         DateTime?
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  user           Utilisateur  @relation(fields: [userId], references: [id])

  @@unique([notificationId, userId])
  @@index([userId, readAt])
}

model NotificationPreference {
  id         Int      @id @default(autoincrement())
  role       Role
  module     String   @db.VarChar(64)
  actionType String   @db.VarChar(64)
  enabled    Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([role, module, actionType])
}

model NotificationConfig {
  id          Int      @id @default(autoincrement())
  module      String   @db.VarChar(64)
  actionType  String   @db.VarChar(64)
  name        String
  description String?  @db.VarChar(255)
  severity    String   @default("low")
  enabled     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([module, actionType])
}

model ReactifPreset {
  id            Int                 @id @default(autoincrement())
  name          String
  formula       String?
  casNumber     String?
  category      String?
  hazardClass   String?
  molarMass     Float?
  density       Float?              // g/mL ou g/cm3
  boilingPointC Float?
  meltingPointC Float?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  inventories   ReactifInventaire[]

  @@unique([name, casNumber])
  @@unique([casNumber])
}

model Supplier {
  id           Int                 @id @default(autoincrement())
  name         String              @unique
  contactEmail String?             @db.VarChar(191)
  phone        String?             @db.VarChar(64)
  address      String?             @db.VarChar(255)
  notes        String?
  kind         String              @default("NORMAL") @db.VarChar(16) // NORMAL | CUSTOM
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  chemicals    ReactifInventaire[]
}

model MaterielPreset {
  id          Int                  @id @default(autoincrement())
  name        String
  category    String?
  discipline  String               @db.VarChar(64)
  description String?              @db.VarChar(255)
  defaultQty  Int?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  categoryId  Int?
  categorie   MaterielCategorie?   @relation(fields: [categoryId], references: [id])
  materiels   MaterielInventaire[]

  @@unique([name, discipline])
}

model MaterielCategorie {
  id              Int                  @id @default(autoincrement())
  name            String
  discipline      String               @db.VarChar(64)
  description     String?              @db.VarChar(255)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  materielPersons MaterielPerso[]
  presets         MaterielPreset[]
  materiels       MaterielInventaire[]

  @@unique([name, discipline])
}

model MaterielPerso {
  id               Int                  @id @default(autoincrement())
  name             String
  discipline       String               @db.VarChar(64)
  description      String?              @db.VarChar(255)
  caracteristiques Json?
  defaultQty       Int?
  volumes          Json?
  categorieId      Int?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  categorie        MaterielCategorie?   @relation(fields: [categorieId], references: [id])
  materiels        MaterielInventaire[]

  @@index([categorieId], map: "MaterielPerso_categorieId_fkey")
}

enum Role {
  ADMIN
  ADMINLABO
  ENSEIGNANT
  LABORANTIN_PHYSIQUE
  LABORANTIN_CHIMIE
  ELEVE
}

model EvenementMateriel {
  id           Int                 @id @default(autoincrement())
  eventId      Int
  materielId   Int?
  materielName String
  quantity     Int                 @default(1)
  isCustom     Boolean             @default(false)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  event        Evenement           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  materiel     MaterielInventaire? @relation(fields: [materielId], references: [id], onDelete: SetNull)

  @@index([eventId])
  @@index([materielId])
}

model EvenementReactif {
  id                Int                @id @default(autoincrement())
  eventId           Int
  reactifId         Int?
  reactifName       String
  requestedQuantity Decimal            @default(0) @db.Decimal(10, 3)
  unit              String?            @default("g") @db.VarChar(32)
  isCustom          Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  event             Evenement          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  reactif           ReactifInventaire? @relation(fields: [reactifId], references: [id], onDelete: SetNull)

  @@index([eventId])
  @@index([reactifId])
}

model EvenementDocument {
  id         Int       @id @default(autoincrement())
  eventId    Int
  fileName   String
  fileUrl    String    @db.VarChar(500)
  fileSize   Int?
  fileType   String?   @db.VarChar(100)
  uploadedAt DateTime  @default(now())
  event      Evenement @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, fileUrl])
  @@index([eventId])
}

// === PRESETS (TP pré-configurés) ===
model EvenementPreset {
  id         Int                       @id @default(autoincrement())
  title      String
  discipline String
  notes      String?
  ownerId    Int
  sharedIds  Json?
  createdAt  DateTime                  @default(now())
  updatedAt  DateTime                  @updatedAt
  owner      Utilisateur               @relation("EvenementPresetsDuProprietaire", fields: [ownerId], references: [id])
  materiels  EvenementPresetMateriel[]
  reactifs   EvenementPresetReactif[]
  documents  EvenementPresetDocument[]
  creneaux   EvenementPresetCreneau[]

  @@index([ownerId])
}

model EvenementPresetCreneau {
  id             Int               @id @default(autoincrement())
  presetId       Int
  discipline     String
  userId         Int?
  eventOwner     Int?
  timeslotParent Int?
  state          String            @default("created")
  startDate      DateTime
  endDate        DateTime
  timeslotDate   DateTime?
  // No proposed* fields for presets
  proposedNotes  String?
  salleIds       Json?
  classIds       Json?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  preset         EvenementPreset   @relation(fields: [presetId], references: [id], onDelete: Cascade)

  @@index([presetId])
}

model EvenementPresetMateriel {
  id           Int                 @id @default(autoincrement())
  presetId     Int
  materielId   Int?
  materielName String
  quantity     Int                 @default(1)
  isCustom     Boolean             @default(false)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  preset       EvenementPreset     @relation(fields: [presetId], references: [id], onDelete: Cascade)
  materiel     MaterielInventaire? @relation(fields: [materielId], references: [id], onDelete: SetNull)

  @@index([presetId])
  @@index([materielId])
}

model EvenementPresetReactif {
  id                Int                @id @default(autoincrement())
  presetId          Int
  reactifId         Int?
  reactifName       String
  requestedQuantity Decimal            @default(0) @db.Decimal(10, 3)
  unit              String?            @default("g") @db.VarChar(32)
  isCustom          Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  preset            EvenementPreset    @relation(fields: [presetId], references: [id], onDelete: Cascade)
  reactif           ReactifInventaire? @relation(fields: [reactifId], references: [id], onDelete: SetNull)

  @@index([presetId])
  @@index([reactifId])
}

model EvenementPresetDocument {
  id         Int             @id @default(autoincrement())
  presetId   Int
  fileName   String
  fileUrl    String          @db.VarChar(500)
  fileSize   Int?
  fileType   String?         @db.VarChar(100)
  uploadedAt DateTime        @default(now())
  preset     EvenementPreset @relation(fields: [presetId], references: [id], onDelete: Cascade)

  @@unique([presetId, fileUrl])
  @@index([presetId])
}

// Event-level custom material request
model MaterielEventRequest {
  id         Int         @id @default(autoincrement())
  eventId    Int
  userId     Int
  name       String
  quantity   Int         @default(1)
  discipline String?
  isCustom   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  event      Evenement   @relation("EvenementCustomMaterielRequests", fields: [eventId], references: [id], onDelete: Cascade)
  user       Utilisateur @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([userId])
}

// Event-level custom chemical request
model ReactifEventRequest {
  id                Int         @id @default(autoincrement())
  eventId           Int
  userId            Int
  name              String
  requestedQuantity Decimal     @default(0) @db.Decimal(10, 3)
  unit              String?     @default("g") @db.VarChar(32)
  discipline        String?
  isCustom          Boolean     @default(true)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  event             Evenement   @relation("EvenementCustomReactifRequests", fields: [eventId], references: [id], onDelete: Cascade)
  user              Utilisateur @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([userId])
}

// Application-wide key/value settings
model AppSetting {
  key       String   @id @db.VarChar(64)
  value     String?  @db.VarChar(255)
  jsonValue Json?
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

// Authentication attempt logs (basic security visibility)
model AuthLog {
  id        Int      @id @default(autoincrement())
  email     String?  @db.VarChar(191)
  userId    Int?
  ip        String?  @db.VarChar(64)
  success   Boolean
  kind      String   @default("LOGIN") @db.VarChar(16)
  createdAt DateTime @default(now())

  @@index([email, createdAt, kind])
  @@index([createdAt])
}

model PasswordResetToken {
  id        Int       @id @default(autoincrement())
  email     String    @db.VarChar(191)
  token     String    @db.VarChar(191)
  expiresAt DateTime
  usedAt    DateTime?
  isOTP     Boolean   @default(false)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())

  @@unique([email, token])
  @@index([email])
  @@index([createdAt])
}

// Account activation tokens
model ActivationToken {
  id        Int      @id @default(autoincrement())
  email     String   @db.VarChar(191)
  token     String   @db.VarChar(191) @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())

  @@index([email])
  @@index([createdAt])
}

// Pending email change verification tokens
model EmailChangeRequest {
  id        Int         @id @default(autoincrement())
  userId    Int
  oldEmail  String
  newEmail  String
  token     String      @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime    @default(now())
  user      Utilisateur @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([newEmail])
}

// Generic API logs (auditing of API calls)
model ApiLog {
  id         Int      @id @default(autoincrement())
  timestamp  DateTime @default(now())
  method     String   @db.VarChar(10)
  path       String   @db.VarChar(255)
  userId     Int?
  role       Role?
  status     Int
  ip         String?  @db.VarChar(64)
  userAgent  String?  @db.VarChar(255)
  module     String?  @db.VarChar(64)
  action     String?  @db.VarChar(64)
  message    String?  @db.VarChar(255)
  meta       Json?

  @@index([timestamp])
  @@index([path])
}
